For easiest use, follow these steps:

1. Copy SenchaToolbox32.dll to the Windows PC (IE is currently a 32-bit process).
2. Run "regsvr32 SenchaToolbox32.dll"
3. Add test server as a Trusted Site in IE.
4. Apply the TrustedSitesCanUseActiveX.reg registry update to loosen ActiveX security for Trusted Sites.
   To do this, double click on the file or run "regedit TrustedSitesCanUseActiveX.reg".
   Since no sites are Trusted by default, this should have no real risk.

Watching The Garbage Collector (IE6, 7 and 8 only)

1. You need the DIA SDK installed. This is used to convert symbol information (things like
    "GcContext::Collect") into virtul addresses.
2. Add the DIA SDK to your PATH.
3. Copy ../msdia90.dll to the DIA SDK (it is only found in Visual Studio's DIA SDK).
4. Run regsvr32 on msdia90.dll.
5. Create C:\Symbols folder to hold PDB files (symbols).
6. Create the environment variable _NT_SYMBOLPATH=C:\Symbols (system wide)
7. Download symbols for JSCRIPT.DLL (see http://msdn.microsoft.com/en-us/library/windows/desktop/ee416588(v=vs.85).aspx#ID4EOBAC):
    C:\Symbols>symchk c:\Windows\System32\jscript.dll /s SRV*c:\symbols*http://msdl.microsoft.com/download/symbols /oc .
8. For unknown reasons, this will sometimes create a "jscript.pdb" folder in C:\Symbols. In
    that folder is another folder and in that folder is the real "jscript.pdb". If this is
    the case, move the real PDB into C:\Symbols (this requires a few steps since there will
    be a name conflict with the folder).

========================================================================
    ACTIVE TEMPLATE LIBRARY : SenchaToolbox Project Overview
========================================================================

AppWizard has created this SenchaToolbox project for you to use as the starting point for
writing your Dynamic Link Library (DLL).

This file contains a summary of what you will find in each of the files that
make up your project.

SenchaToolbox.vcproj
    This is the main project file for VC++ projects generated using an Application Wizard.
    It contains information about the version of Visual C++ that generated the file, and
    information about the platforms, configurations, and project features selected with the
    Application Wizard.

SenchaToolbox.idl
    This file contains the IDL definitions of the type library, the interfaces
    and co-classes defined in your project.
    This file will be processed by the MIDL compiler to generate:
        C++ interface definitions and GUID declarations (SenchaToolbox.h)
        GUID definitions                                (SenchaToolbox_i.c)
        A type library                                  (SenchaToolbox.tlb)
        Marshaling code                                 (SenchaToolbox_p.c and dlldata.c)

SenchaToolbox.h
    This file contains the C++ interface definitions and GUID declarations of the
    items defined in SenchaToolbox.idl. It will be regenerated by MIDL during compilation.

SenchaToolbox.cpp
    This file contains the object map and the implementation of your DLL's exports.

SenchaToolbox.rc
    This is a listing of all of the Microsoft Windows resources that the
    program uses.

SenchaToolbox.def
    This module-definition file provides the linker with information about the exports
    required by your DLL. It contains exports for:
        DllGetClassObject
        DllCanUnloadNow
        DllRegisterServer
        DllUnregisterServer

/////////////////////////////////////////////////////////////////////////////
Other standard files:

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named SenchaToolbox.pch and a precompiled types file named StdAfx.obj.

Resource.h
    This is the standard header file that defines resource IDs.


/////////////////////////////////////////////////////////////////////////////
